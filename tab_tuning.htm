<!DOCTYPE html>
<html>
<head>
<title>Display guitar tabs in simple tuning</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
@font-face {
  font-family: "DejaVu";
  src: url("../phonetic/fonts/dejavu/DejaVuSansMono.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuBold";
  src: url("../phonetic/fonts/dejavu/DejaVuSansMono-Bold.ttf") format("truetype");
}
body {
  margin:0;
  overflow-x:hidden;
  background-color:#000000;
}
* {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: 'DejaVu', monospace;
  color:#ffffff;
}
input, textarea {
  background-color:#000000;
}
#tab {
  letter-spacing: 0px;
  white-space: nowrap;
}
#tab, #out, #hl, #fretless {
  margin:0;
  width:99%;
  height:128px;
  overflow:scroll;
  font-size:16px;
  user-select:none;
  line-height:1em;
  clear: both;
}
#hl {
  position:absolute;
  bottom:0;
}
#toolbar {
  font-size:16px;
  height:1.5em;
}
#fretless_d {
  display:none;
}
#fretless {
  height:225px;
  font-size:16px;
  position:absolute;
  left: 2em;
  bottom: 0;
}
#offset {
  position: absolute;
  left:0;
  bottom:0;
  width:2em;
  border:0;
  background-color:#444444;
}
#ruler_v {
  width: 1em;
  height: 236px;
  overflow: hidden;
  position: absolute;
  left:0;
  bottom:0;
}
#ruler_h {
  width: 600px;
  height: 2em;
  overflow: hidden;
  position: absolute;
  left:2em;
  bottom:0;
}
#ruler_v hr {
  border:0;
  background-color:white;
  width:16px;
  height:1px;
  position:absolute;
}
#ruler_h hr {
  border:0;
  background-color:white;
  width:1px;
  height:16px;
  position:absolute;
}
b span {
  display: inline-block;
  width:0.6025em;
  position: relative;
  top:3.2px;
}
sub {
  line-height:0;
}
sup {
  font-size:inherit;
  position:relative;
  bottom:3.2px;
  vertical-align:middle;
  line-height:0;
}
</style>
</head>
<body oncontextmenu="return false;">
<a id="printLink" href="#" onclick="if(printMode===false){printMode=true;}else{printMode=false;}printTab();">Save or print</a><span id="toolbar"> | <a href="#" onclick="copyMap();">Copy map</a> | <a href="#" onclick="showTab();">Show tab</a> | <a href="#" onclick="if(piano===false){piano=true;}else{piano=false;}">Piano roll</a> | Strings: <a href="#" onclick="switchFretboard(true);">6</a> <a href="#" onclick="switchFretboard(false);">12</a></span>
<textarea id="tab" onchange="changeTuning();" onkeypress="editTab(event);">
  
e|-------------------------------|-------------------------------|
B|-------------------------------|-------------------------------|
G|----4---464---4-----4---464---4|--------------------6---686---6|
D|--6---6-----6-----6---6-----6--|----4---464---4---8---8-----8--|
A|6---------------7--------------|--6---6-----6---9--------------|
E|-------------------------------|7------------------------------|

e|-------------------------------|-------------------------------|
B|-------------------------------|-------------------------------|
G|----4---464---4-----4---464---4|--------------------6---686---6|
D|--6---6-----6-----6---6-----6--|----4---464---4---8---8-----8--|
A|6---------------7--------------|--6---6-----6---9--------------|
E|-------------------------------|7------------------------------|

</textarea>
<pre id="out" onclick='clearHl();'>
</pre>
<pre id="hl">
</pre>
<div id="fretless_d">
  <pre id="fretless" onmousemove='scrollRulers(event.pageX-this.offsetLeft, event.pageY-this.offsetTop);'>
  </pre>
  <input id="offset" type="number" min="1" max="16" step="1" value="1" onchange="off=parseInt(this.value);"/>
  <div id="ruler_v"><hr style='top:2048px;background-color:transparent;'/></div>
  <div id="ruler_h"><hr style='left:4096px;background-color:transparent;'/></div>
</div>

<script>
var audioCtx = null;
var oscillator = [];
var gainNode = [];

var freq = [329.6276, 246.9417, 195.9977, 146.8324, 110.0000, 82.40689];

function setup() {
  audioCtx = new (window.AudioContext || window.webkitAudioContext)({latencyHint:"interactive",sampleRate: 8000});
  for (var i=0; i<6; i++) {
    oscillator[i] = audioCtx.createOscillator();
    gainNode[i] = audioCtx.createGain();
    gainNode[i].gain.setValueAtTime(0, audioCtx.currentTime);
    oscillator[i].type = 'sine';
    oscillator[i].frequency.setValueAtTime(110, audioCtx.currentTime); // value in hertz
    oscillator[i].connect(gainNode[i]);
    gainNode[i].connect(audioCtx.destination);
    oscillator[i].start();
  }
}

function play(t) {
  if (!audioCtx) {
    setup();
  }
  var t_ = t.split(",");
  var s = parseInt(t_[0].replace(/o/g, "0").replace(/i/g, "1"), 2);
  var f = parseInt(t_[1].replace(/o/g, "0").replace(/i/g, "1"), 2);
  oscillator[s].frequency.setValueAtTime(freq[s]*Math.pow(Math.pow(2,1/12), f), audioCtx.currentTime);
  gainNode[s].gain.setValueAtTime(0.25, audioCtx.currentTime+0.001);
}

function stop(t) {
  var s = parseInt(t.split(",")[0].replace(/o/g, "0").replace(/i/g, "1"), 2);
  gainNode[s].gain.setValueAtTime(0, audioCtx.currentTime+0.001);
}

function stopAll() {
  for (var i=0; i<6; i++) {
    gainNode[i].gain.setValueAtTime(0, audioCtx.currentTime+0.001);
  }
}

var tuning =
" c  · c# | d  | d# | e  | f  | f# | g  | g# | a  | a# | b  | c  |\n" +
" g# · a  | a# | b  | c  | c# | d  | d# | e  | f  | f# | g  | g# |\n" +
" e  · f  | f# | g  | g# | a  | a# | b  | c  | c# | d  | d# | e  |\n" +
" C  · C# | D  | D# | e  | f  | f# | g  | g# | a  | a# | b  | c  |\n" +
" G# · A  | A# | B  | C  | C# | D  | D# | e  | f  | f# | g  | g# |\n" +
" E  · F  | F# | G  | G# | A  | A# | B  | C  | C# | D  | D# | e  |\n";

var notes = ("C ,C#,D ,D#,E ,F ,F#,G ,G#,A ,A#,B ,c ,c#,d ,d#,e ,f ,f#,g ,g#,a ,a#,b ").split(",");
var _tuning = "";
var strings = 12;
var fb = 12;
for (var i=strings-1; i>=0; i--) {
  for (var j=0; j<fb; j++) {
    _tuning += "| "+notes[i+j] + " ";
  }
  _tuning += "|\n";
}

var map = [
['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E'],
['B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],
['G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G'],
['D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D'],
['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],
['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E'],
];

var tone = [ '꜌', '꜋', '꜊', '꜉', '꜈', 'ˊ', '꜑', '꜐', '꜏', '꜎', '꜍', '`' ];
var tone_chart = [ '˩', '˨', '˧', '˦', '˥', '꜖', '꜕', '꜔', '꜓', '꜒' ];

var printLink = document.getElementById("printLink");
var toolbar = document.getElementById("toolbar");
var tab = document.getElementById("tab");
var out = document.getElementById("out");
var hl = document.getElementById("hl");
var fretless_d = document.getElementById("fretless_d");
var fretless = document.getElementById("fretless");
var offset = document.getElementById("offset");
var ruler_v = document.getElementById("ruler_v");
var ruler_h = document.getElementById("ruler_h");
var off = 1;
var l = 578;
var ar = 0.33;
var piano = false;
var printMode = false;

function changeTuning() {
  var old = tab.value.trim().split("\n\n");
  var n = [];
  var o = "";
  for (var i=0; i<old.length; i++) {
  	n[i] = old[i].split("|\n");
    for (var j=0; j<6; j++) {
      for (var k=map[0].length-1; k>=0; k--) {
        var k_ = k;
        if (k>=10) {var s = "-";} else {var s = "";}
        var id_ = (j.toString(2)+","+k.toString(2)).replace(/0/g, "o").replace(/1/g, "i");
        var r = new RegExp(k_, 'g');
        if (piano === false) {
    	    n[i][j] = n[i][j].replace(r, s+"<b><span onfocus='highlight(this.title);play(this.id);' onmouseover='highlight(this.title);play(this.id);' ontouchstart='highlight(this.title);play(this.id);' onblur='stop(this.id);' onmouseout='stop(this.id);' ontouchend='stop(this.id);' ontouchcancel='stop(this.id);' id='"+id_+"' title='"+map[j][k]+"'>"+map[j][k].toLowerCase().replace("#", "<sub>#</sub>")+"</span></b>");
        } else {
          if (j>1) {
            var _k = k+1;
          } else {
            var _k = k;
            if (j==0) {
              n[i][j] = "f" + n[i][j].slice(1);
            } else if (j==1) {
              n[i][j] = "c" + n[i][j].slice(1);
            }
          }
          var fret = "━";
          for (var p=0; p<_k; p++) {
            fret = "<sup>"+fret+"</sup>";
          }
          n[i][j] = n[i][j].replace(r, s+"<b><span onfocus='highlight(this.title);play(this.id);' onmouseover='highlight(this.title);play(this.id);' ontouchstart='highlight(this.title);play(this.id);' onblur='stop(this.id);' onmouseout='stop(this.id);' ontouchend='stop(this.id);' ontouchcancel='stop(this.id);' id='"+id_+"' title='"+map[j][k]+"'>"+fret+"</span></b>");
        }
      }
    }
    o += n[i].join("|\n")+"\n\n";
  }
  out.innerHTML = o;
}

function scrollRulers(x, y) {
  ruler_v.scrollTo(0,2048-(l*ar+Math.log2(off)*l*ar)-y);
  ruler_h.scrollTo(l+Math.log2(off)*l-x,0);
}

function countIntervals() {
  for (var i=1; i<17; i++) {
    ruler_v.innerHTML += "<hr style='top:"+(2048-(Math.log2(i)*l*ar+l*ar))+"px;'/>";
    ruler_h.innerHTML += "<hr style='left:"+(Math.log2(i)*l+l)+"px;'/>";
  }
}
countIntervals();

function _highlight(t) {
  var r = new RegExp(' '+t+' ', 'gi');
  var h = "<span style='background-color:darkgray;'>_"+t+"_</span>";
  fretless.innerHTML = fretless.innerHTML.replace(r, h);
}

function highlight(t) {
  _highlight(t);
  var r = new RegExp(' '+t+' ', 'gi');
  var h = "<span style='background-color:darkgray;'>_"+t+"_</span>";
  hl.innerHTML = hl.innerHTML.replace(r, h);
}

function clearHl() {
  hl.innerHTML = tuning.toLowerCase();
  fretless.innerHTML = _tuning.toLowerCase();
}
clearHl();

function switchFretboard(d) {
  if (d === true) {
    fretless_d.style.display = "none";
    hl.style.display = "block";
    tab.style.display = "block";
  } else if (d === false) {
    fretless_d.style.display = "block";
    hl.style.display = "none";
    tab.style.display = "none";
  } else {
    fretless_d.style.display = "none";
    hl.style.display = "none";
    tab.style.display = "none";
  }
}

function showTab() {
  if (tab.style.display == "none") {
    tab.style.display = "block";
  } else {
    tab.style.display = "none";
  }
}

function printTab() {
  if (printMode === true) {
    toolbar.style.display = "none";
    out.style.overflow = "visible";
    switchFretboard(null);
    printLink.innerText = "[x]";
    window.print();
  } else {
    toolbar.style.display = "inline-block";
    out.style.overflow = "scroll";
    switchFretboard(true);
    printLink.innerText = "Save or print";
  }
}

function copyMap() {
  if (hl.style.display != "none") {
    var el = hl;
  } else {
    var el = fretless_d;
  }
  navigator.clipboard.writeText(el.innerText.replace(/·/g, "|").replace(/\| [abcdefg]/g, "|  "));
}

function editTab(e) {
  if (e.key.length == 1 && !e.ctrlKey && !e.altKey && !e.metaKey) {
    e.preventDefault();
    var b = tab.selectionStart;
    var d = tab.selectionEnd;
    tab.value = tab.value.substr(0,b) + e.key + tab.value.substr(d+1);
    tab.setSelectionRange(b+1, d+1);
  }
}

</script>
</body>
</html>
