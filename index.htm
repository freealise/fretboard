<!DOCTYPE html>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>Fretboard emulator</title>
<link href='https://fonts.gstatic.com' rel='preconnect'/>
<link href='https://fonts.googleapis.com/css2?family=Averia+Serif+Libre:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&amp;display=swap' rel='stylesheet'/>
<link href='https://fonts.googleapis.com/icon?family=Material+Icons' rel='stylesheet'/>
<style>
* {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: 'Averia Serif Libre', serif;
  font-size:14px;
}
body {
  margin:0;
  padding:0;
  background:black;
  background-repeat: repeat;
  touch-action: none;
}
a {
  color:gray;
}
#toolbar {
  height:32px;
  min-width:600px;
  position:fixed;
  bottom:0;
  left:0;
}
#tuning {
  position:absolute;
  left:0;
  top:64px;
}
#toolbar a, #tuning a {
  padding: 2px;
}
#toolbar i, #tuning i {
  line-height: 1em;
  font-size: 24px;
  color: white;
}
audio {
  height: 16px;
  width: 200px;
  margin: 4px;
}
#openCsv {
  display:none;
}
#midiIn, #sampleRate {
  vertical-align: top;
  width: 128px;
  height: 16px;
  line-height: 1em;
  font-size: 14px;
  margin: 4px;
  padding: 0;
  border: 0;
}
#sampleRate {
  width: 64px;
}
#tuners {
  display:none;
  min-width:1600px;
  position:absolute;
  left:0;
  top:0;
}
.tuner {
  background-color:rgba(0,0,0,0.5);
  display:inline-block;
  text-align:center;
  font-weight:bold;
  font-size:13px;
  float:left;
  height: 63px;
  width: 62px;
  border:0;
  padding:0;
  margin:0 1px;
  color:lightgray;
}
.tuner select {
  border:0;
  padding:0;
  margin:8px 0;
  font-size:14px;
}
.tuner input {
  text-align:center;
  font-weight:bold;
  width:28px;
  height:16px;
  font-size:14px;
  background-color:transparent;
  color:white;
  border:0;
  padding:0;
  margin:8px 0;
}
#keys {
  width:1600px;
  height:1536px;
  overflow:hidden;
  clear:both;
  margin:0;
  padding:0;
  background-image: repeating-linear-gradient(0deg, transparent 0px, rgba(255,255,255,0.25) 2.67px,  transparent 5.33px), url(texture.png);
}
.key {
  float:left;
  width:64px;
  height:1536px;
  border:0;
  margin:0;
  padding:0;
  background-image: linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), repeating-linear-gradient(0deg, transparent 0%, transparent 4.17%, rgba(0,0,0,0.5) 4.17%, rgba(0,0,0,0.5) 8.33%, transparent 8.33%, transparent 12.50%, rgba(0,0,0,0.5) 12.50%, rgba(0,0,0,0.5) 16.67%, transparent 16.67%, transparent 20.83%, rgba(0,0,0,0.5) 20.83%, rgba(0,0,0,0.5) 25.00%, transparent 25.00%, transparent 29.17%, transparent 29.17%, transparent 33.33%, rgba(0,0,0,0.5) 33.33%, rgba(0,0,0,0.5) 37.50%, transparent 37.50%, transparent 41.67%, rgba(0,0,0,0.5) 41.67%, rgba(0,0,0,0.5) 45.83%, transparent 45.83%, transparent 50%);
  background-position: 0 0px;
}
#notice {
  background-color:white;
  text-align:center;
  width:256px;
  position:fixed;
  bottom:0;
  right:0;
  padding:8px;
}
#close {
  float:right;
}
</style>
</head>
<body oncontextmenu="return false;" onkeydown="if(kbrd[event.key]){playNote(kbrd[event.key][0], kbrd[event.key][1]*64, 32.0);}" onkeyup="if(kbrd[event.key]){stopNote(kbrd[event.key][0]);}">
  
  <div id="toolbar">
    <a title="On / Off" href="javascript:init(sampleRate.value);"><i id='play' class='material-icons notranslate'>power_settings_new</i></a><a title="Scale" href="javascript:if(l===false){l=true;}else{l=false;}scale();"><i id='scale' class='material-icons notranslate'>line_weight</i></a><audio controls></audio><a title="Record" href="javascript:record();"><i id='rec' class='material-icons notranslate'>fiber_manual_record</i></a><a title="Tuning" href="javascript:showTuning();"><i id="tune" class='material-icons notranslate'>music_note</i></a>
    <select title="MIDI input" id="midiIn" onchange="selectMIDIIn(event);"></select>
    <select title="Sample rate" id="sampleRate" onchange="audioContext=null;init(this.value);">
      <option value="8000" selected="true">8000</option>
      <option value="11025">11025</option>
      <option value="16000">16000</option>
      <option value="22050">22050</option>
      <option value="44100">44100</option>
      <option value="48000">48000</option>
      <option value="96000">96000</option>
    </select>
  </div>
  <div id="tuners">
    <div id="tuning">
      <a title="Save tuning" href="javascript:saveTuning();"><i class='material-icons notranslate'>audio_file</i></a><a id="csv"></a><a title="Open tuning" href="javascript:openTuning();"><i class='material-icons notranslate'>file_open</i></a><input type="file" id="openCsv" onchange="openTuning();"/>
    </div>
  </div>
  <div id="keys"></div>
  <div id="notice">
    <a id="close" href="#" onclick="this.parentNode.style.display='none';"><i class="material-icons notranslate">close</i></a>
    This app is optimized for touchscreen devices but supports MIDI, as well as mouse and keyboard.<br/>
      <i class="material-icons notranslate">touch_app</i> <i class="material-icons notranslate">piano</i> <i class="material-icons notranslate">ads_click</i> <i class="material-icons notranslate">keyboard</i><br/>
    If anything is broken, please <a href="https://browsehappy.com/" target="_blank">update</a> your browser or <a href="https://freealise.com/network.htm" target="_blank">report</a> it.
  </div>
  <script type="text/javascript" src="midi.js"></script>
  
<script>
var sampleRate = document.getElementById("sampleRate");
var keys = document.getElementById("keys");
var tuners = document.getElementById("tuners");
var csv = document.getElementById("csv");
var openCsv = document.getElementById("openCsv");
var notes = ["c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b", "c"];
var tuning_csv = new Array(25);
var t = getCookie("tuning");
if (t != "") {
  console.log(t);
  t = t.split(" ");
}

for (var i=0; i<25; i++) {
  if (t == "") {
    tuning_csv[i] = [i, Math.pow(2,i/12), 1];
  } else {
    tuning_csv[i] = t[i].split(",");
  }
  keys.innerHTML += "<div class='key' id='"+i+"' style='background-position:0 "+(-i*64)+"px;' " +
  "onmousemove='pitchShift(this.id, event.pageY-this.offsetTop, event.pageX-this.offsetLeft);' " +
  "ontouchmove='pitchShift(this.id, event.changedTouches[0].pageY-this.offsetTop, event.changedTouches[0].pageX-this.offsetLeft);" +
    "quality(this.id, event.changedTouches[0].radiusX+event.changedTouches[0].radiusY);' " +
  "onmousedown='playNote(this.id, event.pageY-this.offsetTop, event.pageX-this.offsetLeft);' " +
  "ontouchstart='playNote(this.id, event.changedTouches[0].pageY-this.offsetTop, event.changedTouches[0].pageX-this.offsetLeft);' " +
  "ontouchend='stopNote(this.id);' ontouchcancel='stopNote(this.id);' onmouseup='stopNote(this.id);' onmouseleave='stopNote(this.id);'></div>";
  tuners.innerHTML += "<div class='tuner'><select class='note' title='"+i+"' onchange='detuneNote(this.title, this.value);'></select><br/><input type='number' class='n' title='"+i+"' min='1' max='32' step='1' value='"+tuning_csv[i][1]+"' onchange='detune(this.title);' onclick='this.value=parseInt(this.value);'/>/<input type='number' class='d' title='"+i+"' min='1' max='32' step='1' value='"+tuning_csv[i][2]+"' onchange='detune(this.title);' onclick='this.value=parseInt(this.value);'/></div>";
  for (var j=0; j<49; j++) {
    var o = parseInt(j/12);
    var note = notes[j-12*o];
    if (o<2) {
      note = note.toUpperCase();
    }
    var q = "&nbsp;";
    if (o<1) {
      q = ".";
    } else if (o>2) {
      q = "`";
    }
    document.getElementsByClassName("note")[i].innerHTML += "<option value='"+j+"'>"+q+note+"</option>";
  }
}

var audioContext = null;
var gainParam = null;
var osc = [];
var gain = [];
var tuning = new Array(25);
for (var i=0; i<25; i++) {
  tuning[i] = i*100;
  document.getElementsByClassName("note")[i].selectedIndex = tuning_csv[i][0];
}
var kd = new Array(25);
kd.fill(false);
var l = false;
var mediaRecorder = null;
var recording = false;
var baseFreq = 110;

function init(r) {
  if (!audioContext) {
    if (navigator.platform.indexOf("Mac")>-1 || navigator.platform.indexOf("iPad")>-1 || navigator.platform.indexOf("iPod")>-1 || navigator.platform.indexOf("iPhone")>-1) {
  	  audioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)({sampleRate: r});
  	} else {
  	  audioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)({latencyHint:"interactive",sampleRate: r});
  	}
    gainParam = audioContext.createGain();
    gainParam.gain.setValueAtTime(0, audioContext.currentTime);
    gainParam.gain.linearRampToValueAtTime(1.0, audioContext.currentTime + 0.001);
    document.getElementById("play").innerText = "task_alt";
      
    var chunks = [];
    var dest = audioContext.createMediaStreamDestination();
    mediaRecorder = new MediaRecorder(dest.stream);
      
    mediaRecorder.ondataavailable = function(evt) {
      // push each chunk (blobs) in an array
      chunks.push(evt.data);
    };
    
    mediaRecorder.onstop = function(evt) {
      // Make blob out of our blobs, and open it.
      var blob = new Blob(chunks, { 'type' : 'audio/wav' });
      document.querySelector("audio").src = URL.createObjectURL(blob);
    };
      
    for (var i=0; i<25; i++) {
      osc[i] = audioContext.createOscillator();
      osc[i].type = "sine";
      osc[i].frequency.value = baseFreq*Math.pow(2,i/12);
      osc[i].detune.value = tuning[i];
        
      gain[i] = audioContext.createGain();
      gain[i].gain.value = 0.0;
    
      osc[i].connect(gain[i]);
      gain[i].connect(audioContext.destination);
      gain[i].connect(dest);
      osc[i].start();
    }
  }
}

function playNote(key, p, v) {
  if (gain[key]) {
    kd[key] = true;
    pitchShift(key, p, v);
  }
}

function stopNote(key) {
  if (gain[key]) {
    kd[key] = false;
    gain[key].gain.linearRampToValueAtTime(0.0, audioContext.currentTime + 0.001);
  }
}

function pitchShift(key, p, v) {
  if (osc[key]) {
    if (l === true) {
      osc[key].frequency.linearRampToValueAtTime(baseFreq*2048/(2048-p), audioContext.currentTime + 0.001);
    } else {
      osc[key].frequency.linearRampToValueAtTime(baseFreq*Math.pow(2,p/64/12), audioContext.currentTime + 0.001);
    }
    if (v) {
      volume(key, v);
    }
  }
}

function volume(key, v) {
  if (gain[key] && kd[key] === true) {
    v = -Math.cos(v*Math.PI*2/64)/2+0.5;
    gain[key].gain.linearRampToValueAtTime(v/25, audioContext.currentTime + 0.001);
  }
}

function quality(key, r) {
  if (osc[key]) {
    //use for amplitude modulation or pan control
    //gain[key].gain.linearRampToValueAtTime(r*16, audioContext.currentTime + 0.001);
  }
}

function scale() {
  if (l === true) {
    var scale = [];
    var frets = [];
    for (var i=0; i<=25; i++) {
      scale[i] = 1536-Math.pow(2, i/12)*64*8+64*8;
      frets[i] = scale[i]/1536*100;
      //document.getElementById("keys").innerHTML += "<hr style='margin:0;width:64px;background-color:white;position:absolute;left:0px;top:"+scale[i]+"px;'/>";
    }
    var lg = [];
    var colors = ["transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent", "transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent"];
    for (var k=0; k<25; k++) {
      lg[k] = "linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), linear-gradient(180deg, ";
      for (var i=23; i>=0; i--) {
          var j = i-k;
          while (j>=12) {j-=12;}
          while (j<0) {j+=12;}
          lg[k] += colors[j]+" "+frets[i+1]+"%, "+colors[j]+" "+frets[i]+"%, "
      }
      lg[k] = lg[k].slice(0,-2)+")";
      document.getElementById(k).style.backgroundImage = lg[k];
      document.getElementById(k).style.backgroundPosition = "0 0";
      document.getElementById("scale").innerText = "reorder";
    }
  } else {
    for (var k=0; k<25; k++) {
      document.getElementById(k).style.backgroundImage = "linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), repeating-linear-gradient(0deg, transparent 0%, transparent 4.17%, rgba(0,0,0,0.5) 4.17%, rgba(0,0,0,0.5) 8.33%, transparent 8.33%, transparent 12.50%, rgba(0,0,0,0.5) 12.50%, rgba(0,0,0,0.5) 16.67%, transparent 16.67%, transparent 20.83%, rgba(0,0,0,0.5) 20.83%, rgba(0,0,0,0.5) 25.00%, transparent 25.00%, transparent 29.17%, transparent 29.17%, transparent 33.33%, rgba(0,0,0,0.5) 33.33%, rgba(0,0,0,0.5) 37.50%, transparent 37.50%, transparent 41.67%, rgba(0,0,0,0.5) 41.67%, rgba(0,0,0,0.5) 45.83%, transparent 45.83%, transparent 50%)";
      document.getElementById(k).style.backgroundPosition = "0 "+(-k*64)+"px";
      document.getElementById("scale").innerText = "line_weight";
    }
  }
}

function record() {
  if (!recording) {
    mediaRecorder.start();
    recording = true;
    document.getElementById("rec").innerText = "stop";
  } else {
    mediaRecorder.stop();
    recording = false;
    document.getElementById("rec").innerText = "fiber_manual_record";
  }
}

function detune(key) {
  document.getElementsByClassName("note")[key].selectedIndex = -1;
  var n_ = document.getElementsByClassName("n")[key];
  var d_ = document.getElementsByClassName("d")[key];
  var n = parseInt(n_.value);
  var d = parseInt(d_.value);
  if (!n || !d || n<=0 || d<=0) {
    n = Math.pow(2,key/12);
    d = 1;
    n_.value = n;
    d_.value = d;
  }
  console.log(n+" / "+d+" = "+n/d);
  tuning[key] = Math.log2(n/d)*12*100;
  if (osc[key]) {
    osc[key].detune.value = tuning[key];
  }
  tuning_csv[key] = [-1, n_.value, d_.value];
  setCookie("tuning", tuning_csv, 365);
}

function detuneNote(key, v) {
  var n_ = document.getElementsByClassName("n")[key];
  var d_ = document.getElementsByClassName("d")[key];
  tuning[key] = v*100;
  n_.value = Math.pow(2,v/12);
  d_.value = 1;
  if (osc[key]) {
    osc[key].detune.value = tuning[key];
  }
  tuning_csv[key] = [v, n_.value, d_.value];
  setCookie("tuning", tuning_csv, 365);
}

function showTuning() {
  if (tuners.style.display != 'block') {
    tuners.style.display = 'block';
    document.getElementById("tune").innerText = "music_off";
  } else {
    tuners.style.display = 'none';
    document.getElementById("tune").innerText = "music_note";
  }
}

function saveTuning() {
    var filename = "fretboard_tuning.csv";
    csv.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(tuning_csv.join("\n")));
    csv.setAttribute('download', filename);
    csv.click();
}

function openTuning() {
  if (!openCsv.files[0]) {
    openCsv.click();
  } else {
    var file    = openCsv.files[0];
    var reader  = new FileReader();
  
    reader.addEventListener("load", function () {
      var a = reader.result.split("\n");
      for (var i=0; i<a.length; i++) {
        a[i] = a[i].split(",");
        console.log(a[i][0] + " " + a[i][1] + " " + a[i][2]);
        tuning[i] = Math.log2( a[i][1] / a[i][2] )*12*100;
        document.getElementsByClassName("note")[i].selectedIndex = a[i][0];
        document.getElementsByClassName("n")[i].value = a[i][1];
        document.getElementsByClassName("d")[i].value = a[i][2];
        tuning_csv[i] = [a[i][0], a[i][1], a[i][2]];
        setCookie("tuning", tuning_csv, 365);
      }
      audioContext = null;
      init(sampleRate.value);
    }, false);
  
    if (file && file.name.slice(-4) == ".csv") {
      reader.readAsText(file);
    }
  }
}

function setCookie(cname,cvalue,exdays) {
  t = "";
  for (var i=0; i<cvalue.length; i++) {
    t += cvalue[i].join(",") + " ";
  }
  var cvalue = t;
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = "expires=" + d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}

</script>
</body>
</html>
