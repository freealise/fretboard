<!DOCTYPE html>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>Fretboard emulator</title>
<link href='https://fonts.gstatic.com' rel='preconnect'/>
<link href='https://fonts.googleapis.com/css2?family=Averia+Serif+Libre:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&amp;display=swap' rel='stylesheet'/>
<link href='https://fonts.googleapis.com/icon?family=Material+Icons' rel='stylesheet'/>
<style>
@font-face {
  font-family: "DejaVu";
  src: url("/vocalise/fonts/dejavu/DejaVuSansMono.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuBold";
  src: url("/vocalise/fonts/dejavu/DejaVuSansMono-Bold.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuSans";
  src: url("/vocalise/fonts/dejavu/DejaVuSans.ttf") format("truetype");
}
@font-face {
  font-family: "DejaVuSansBold";
  src: url("/vocalise/fonts/dejavu/DejaVuSans-Bold.ttf") format("truetype");
}
* {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: 'Averia Serif Libre', serif;
  font-size:14px;
}
body {
  margin:0;
  padding:0;
  background:black;
  background-repeat: repeat;
  touch-action: none;
}
a {
  color:gray;
}
#toolbar {
  height:32px;
  min-width:600px;
  position:fixed;
  bottom:0;
  left:0;
}
#tuning {
  position:fixed;
  right:0;
  top:64px;
}
#toolbar a, #tuning a {
  padding: 2px;
}
#toolbar i, #tuning i {
  line-height: 1em;
  font-size: 24px;
  color: white;
}
audio {
  height: 16px;
  width: 200px;
  margin: 4px;
}
#openCsv {
  display:none;
}
#midiIn, #sampleRate {
  vertical-align: top;
  width: 128px;
  height: 16px;
  line-height: 1em;
  font-size: 14px;
  margin: 4px;
  padding: 0;
  border: 0;
}
#sampleRate {
  width: 64px;
}
#tuners {
  display:none;
  min-width:1600px;
  position:absolute;
  left:0;
  top:0;
}
.tuner {
  background-color:rgba(0,0,0,0.5);
  display:inline-block;
  text-align:center;
  font-weight:bold;
  font-size:13px;
  float:left;
  height: 63px;
  width: 62px;
  border:0;
  padding:0;
  margin:0 1px;
  color:lightgray;
}
.tuner select {
  border:0;
  padding:0;
  margin:8px 0;
  font-size:14px;
}
.tuner input {
  text-align:center;
  font-weight:bold;
  width:28px;
  height:16px;
  font-size:14px;
  background-color:transparent;
  color:white;
  border:0;
  padding:0;
  margin:8px 0;
}
#keys {
  width:1600px;
  height:1536px;
  overflow:hidden;
  clear:both;
  margin:0;
  padding:0;
  background-image: repeating-linear-gradient(0deg, transparent 0px, rgba(255,255,255,0.25) 2.67px,  transparent 5.33px), url(texture.png);
}
.key {
  float:left;
  width:64px;
  height:1536px;
  border:0;
  margin:0;
  padding:0;
  background-image: linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), repeating-linear-gradient(0deg, transparent 0%, transparent 4.17%, rgba(0,0,0,0.5) 4.17%, rgba(0,0,0,0.5) 8.33%, transparent 8.33%, transparent 12.50%, rgba(0,0,0,0.5) 12.50%, rgba(0,0,0,0.5) 16.67%, transparent 16.67%, transparent 20.83%, rgba(0,0,0,0.5) 20.83%, rgba(0,0,0,0.5) 25.00%, transparent 25.00%, transparent 29.17%, transparent 29.17%, transparent 33.33%, rgba(0,0,0,0.5) 33.33%, rgba(0,0,0,0.5) 37.50%, transparent 37.50%, transparent 41.67%, rgba(0,0,0,0.5) 41.67%, rgba(0,0,0,0.5) 45.83%, transparent 45.83%, transparent 50%);
  background-position: 0 0px;
}
#offset {
  position:absolute;
  top:64px;
  left:0;
  width:26px;
  height:12px;
  border: 1px dashed gray;
  padding:2px;
  margin:0;
  background-color: transparent;
  color: white;
  text-align: center;
  font-weight:bold;
}
#ruler_v {
  overflow: hidden;
  position:absolute;
  top:80px;
  left:0;
  height:1536px;
  width:16px;
}
#ruler_h {
  overflow: hidden;
  position:absolute;
  top:64px;
  left:32px;
  height:16px;
  width:1600px;
}
#ruler_v hr {
  margin:0;
  padding:0;
  border:0;
  background-color:white;
  width:16px;
  height:1px;
  position:absolute;
}
#ruler_h hr {
  margin:0;
  padding:0;
  border:0;
  background-color:white;
  width:1px;
  height:16px;
  position:absolute;
}
#notice {
  background-color:white;
  text-align:center;
  width:256px;
  position:fixed;
  bottom:64px;
  right:0px;
  padding:8px;
}
#close {
  color:white;
  float:left;
  margin-left: -32px;
  margin-right: 0;
}
#hl {
  position:absolute;
  font-weight:bold;
  z-index:-1;
}
#txt, #hl {
  white-space:pre-wrap;
  letter-spacing:0;
  line-height:1em;
  overflow:scroll;
  font-family: 'DejaVu', monospace;
  background-color:transparent;
  font-size: 14px;
  margin: 0px;
  padding: 2px;
  height: 64px;
  width: 250px;
  border: 1px dashed lightgray;
  resize: none;
}
#notice div {
  width:256px;
  overflow:scroll;
}
#notice ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}
#notice li {
  float:left;
  width:48px;
}
#notice .n {
  max-width:16px;
  font-weight:bold;
}
</style>
</head>
<body onload="parse(txt.value);highlight();" oncontextmenu="return false;" ondragstart="event.preventDefault();" onkeydown="if(kbrd[event.key]){playNote(kbrd[event.key][0], kbrd[event.key][1]*64, 32.0, 16, 16);}" onkeyup="if(kbrd[event.key]){stopNote(kbrd[event.key][0]);}">
  
  <div id="toolbar">
    <a title="On / Off" href="javascript:init(sampleRate.value);"><i id='play' class='material-icons notranslate'>power_settings_new</i></a><a title="Scale" href="javascript:if(l===false){l=true;}else{l=false;}scale();"><i id='scale' class='material-icons notranslate'>line_weight</i></a><audio controls></audio><a title="Record" href="javascript:record();"><i id='rec' class='material-icons notranslate'>fiber_manual_record</i></a><a title="Tuning" href="javascript:showTuning();"><i id="tune" class='material-icons notranslate'>music_note</i></a>
    <select title="MIDI input" id="midiIn" onchange="selectMIDIIn(event);"></select>
    <select title="Sample rate" id="sampleRate" onchange="ac=null;init(this.value);">
      <option value="8000" selected="true">8000</option>
      <option value="11025">11025</option>
      <option value="16000">16000</option>
      <option value="22050">22050</option>
      <option value="44100">44100</option>
      <option value="48000">48000</option>
      <option value="96000">96000</option>
    </select>
  </div>
  <div id="tuners">
    <input id="offset" type="number" min="1" max="16" step="1" value="1" onchange="off=parseInt(this.value);"/>
    <div id="ruler_v"><hr style='top:4096px;background-color:transparent;'/></div>
    <div id="ruler_h"><hr style='left:8192px;background-color:transparent;'/></div>
    <div id="tuning">
      <a title="Save tuning" href="javascript:saveTuning();"><i class='material-icons notranslate'>audio_file</i></a><a id="csv"></a><a title="Open tuning" href="javascript:openTuning();"><i class='material-icons notranslate'>file_open</i></a><input type="file" id="openCsv" onchange="openTuning();"/>
    </div>
  </div>
  <div id="keys"></div>
  <div id="notice">
    <a id="close" href="#" onclick="showPopup();"><i class="material-icons notranslate">keyboard_double_arrow_right</i></a>
    <i>This app is optimized for touchscreen devices but supports MIDI, as well as mouse and keyboard.<br/>
      <i class="material-icons notranslate">touch_app</i> <i class="material-icons notranslate">piano</i> <i class="material-icons notranslate">ads_click</i> <i class="material-icons notranslate">keyboard</i><br/>
    If anything is broken, please <a href="https://browsehappy.com/" target="_blank">update</a> your browser or <a href="https://freeali.se/connect.htm" target="_blank">report</a> it.</i>
    <canvas id="canvas" width="256" height="16"></canvas>
    <ul><li class="n">f:</li><li id="f_">_</li><li class="n">v:</li><li id="v_">_</li><li class="n">rx:</li><li id="rx_">_</li><li class="n">ry:</li><li id="ry_">_</li></ul>
    <textarea id="hl"></textarea>
    <textarea id="txt" onkeyup="highlight();hl.scrollTo(0,this.scrollTop);" onchange="parse(this.value);" onscroll="hl.scrollTo(0,this.scrollTop);">Math.sin(i * Math.PI / sampleRate.value * f) / (i + f) * f</textarea>
    <div><canvas id="chart" width="8000" height="16"></canvas></div>
    <i>Inspired by <a href="http://www.falstad.com/dfilter/" target="_blank">Math and Physics Applets</a></i>
  </div>
  <script type="text/javascript" src="midi.js"></script>
  <script type="text/javascript" src="frequency-visualizer.js"></script>
<script>
var canvas = document.getElementById("canvas");
var chart = document.getElementById("chart");
var ctx = chart.getContext("2d");
ctx.fillStyle = '#ffffff';
ctx.strokeStyle = 'lightgray';

var notice = document.getElementById("notice");
var close = document.getElementById("close");
var txt = document.getElementById("txt");
var hl = document.getElementById("hl");

var f_ = document.getElementById("f_");
var v_ = document.getElementById("v_");
var rx_ = document.getElementById("rx_");
var ry_ = document.getElementById("ry_");

var sampleRate = document.getElementById("sampleRate");
var keys = document.getElementById("keys");
var tuners = document.getElementById("tuners");
var csv = document.getElementById("csv");
var openCsv = document.getElementById("openCsv");
var notes = ["c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b", "c"];
var tuning_csv = new Array(25);
var t = getCookie("tuning");
if (t != "") {
  console.log(t);
  t = t.split(" ");
}

for (var i=0; i<25; i++) {
  if (t == "") {
    tuning_csv[i] = [i, Math.pow(2,i/12), 1];
  } else {
    tuning_csv[i] = t[i].split(",");
  }
  keys.innerHTML += "<div class='key' id='"+i+"' style='background-position:0 "+(-i*64)+"px;' " +
  "onmousemove='pitchShift(this.id, event.pageY-this.offsetTop, event.pageX-this.offsetLeft, 16, 16);' " +
  "ontouchmove='pitchShift(this.id, event.changedTouches[0].pageY-this.offsetTop, event.changedTouches[0].pageX-this.offsetLeft, event.changedTouches[0].radiusX, event.changedTouches[0].radiusY);' " +
  "onmousedown='playNote(this.id, event.pageY-this.offsetTop, event.pageX-this.offsetLeft, 16, 16);' " +
  "ontouchstart='playNote(this.id, event.changedTouches[0].pageY-this.offsetTop, event.changedTouches[0].pageX-this.offsetLeft, event.changedTouches[0].radiusX, event.changedTouches[0].radiusY);' " +
  "ontouchend='stopNote(this.id);' ontouchcancel='stopNote(this.id);' onmouseup='stopNote(this.id);' onmouseleave='stopNote(this.id);'></div>";
  tuners.innerHTML += "<div class='tuner'><select class='note' title='"+i+"' onchange='detuneNote(this.title, this.value);'></select><br/><input type='number' class='n' title='"+i+"' min='1' max='32' step='1' value='"+tuning_csv[i][1]+"' onchange='detune(this.title);' onclick='this.value=parseInt(this.value);'/>/<input type='number' class='d' title='"+i+"' min='1' max='32' step='1' value='"+tuning_csv[i][2]+"' onchange='detune(this.title);' onclick='this.value=parseInt(this.value);'/></div>";
  for (var j=0; j<49; j++) {
    var o = parseInt(j/12);
    var note = notes[j-12*o];
    if (o<2) {
      note = note.toUpperCase();
    }
    var q = "&nbsp;";
    if (o<1) {
      q = ".";
    } else if (o>2) {
      q = "`";
    }
    document.getElementsByClassName("note")[i].innerHTML += "<option value='"+j+"'>"+q+note+"</option>";
  }
}

var ac, noiseBuffer, left, right, source, out, res;
var gain = new Array(25);
var convolver = new Array(25);
var gains = new Array(25);

for (var i=0; i<25; i++) {
  convolver[i] = new Array(2);
  gains[i] = new Array(2);
}

var tuning = new Array(25);
for (var i=0; i<25; i++) {
  tuning[i] = Math.pow(2, i/12);
  document.getElementsByClassName("note")[i].selectedIndex = tuning_csv[i][0];
}
var kd = new Array(25);
kd.fill(false);
var l = false;
var mediaRecorder = null;
var recording = false;
var baseFreq = 110;

function init(r) {
  if (!ac) {
    if (navigator.platform.indexOf("Mac")>-1 || navigator.platform.indexOf("iPad")>-1 || navigator.platform.indexOf("iPod")>-1 || navigator.platform.indexOf("iPhone")>-1) {
  	  ac = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)({sampleRate: r});
  	} else {
  	  ac = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)({latencyHint:"interactive",sampleRate: r});
  	}
    document.getElementById("play").innerText = "task_alt";
    var visualizer = new App.FrequencyVisualizer(ac, canvas);
      
    var chunks = [];
    var dest = ac.createMediaStreamDestination();
    mediaRecorder = new MediaRecorder(dest.stream);
      
    mediaRecorder.ondataavailable = function(evt) {
      // push each chunk (blobs) in an array
      chunks.push(evt.data);
    };
    
    mediaRecorder.onstop = function(evt) {
      // Make blob out of our blobs, and open it.
      var blob = new Blob(chunks, { 'type' : 'audio/wav' });
      document.querySelector("audio").src = URL.createObjectURL(blob);
    };
    
    // Create an empty stereo buffer at the sample rate of the AudioContext
    var myArrayBuffer = ac.createBuffer(2, ac.sampleRate * 1.0, ac.sampleRate);
          
    // Fill the buffer with white noise;
    //just random values between -1.0 and 1.0
    for (var channel = 0; channel < myArrayBuffer.numberOfChannels; channel++) {
      // This gives us the actual ArrayBuffer that contains the data
      var nowBuffering = myArrayBuffer.getChannelData(channel);
      for (var i = 0; i < myArrayBuffer.length; i++) {
        // Math.random() is in [0; 1.0]
        // audio needs to be in [-1.0; 1.0]
        nowBuffering[i] = Math.random() - 0.5;
      }
    }
          
    // Get an AudioBufferSourceNode.
    // This is the AudioNode to use when we want to play an AudioBuffer
    source = ac.createBufferSource();
    // set the buffer in the AudioBufferSourceNode
    source.buffer = myArrayBuffer;
    // connect the AudioBufferSourceNode to the
    // destination so we can hear the sound
    source.playbackRate.value = 1.0;    //pitch
    source.loop = true;
    
    noiseBuffer = ac.createBuffer(2, ac.sampleRate, ac.sampleRate);
    left = noiseBuffer.getChannelData(0);
    right = noiseBuffer.getChannelData(1);
    
    for (var j=0; j<25; j++) {
      gain[j] = ac.createGain();
      gain[j].gain.value = 0.0;
      gain[j].connect(ac.destination);
      visualizer.acceptConnection(gain[j]);
      
      for (var i=0; i<2; i++) {
        convolver[j][i] = ac.createConvolver();
        gains[j][i] = ac.createGain();
        gains[j][i].gain.value = 0.0;
      
        source.connect(convolver[j][i]);
        convolver[j][i].connect(gains[j][i]);
        gains[j][i].connect(gain[j]);
      }
      
      reverb(baseFreq*tuning[j], 1.0, 16, 16, 0, j);
    }
    source.start();
  }
}

function highlight() {
  hl.value = txt.value.replace(/(\w+\.|[^\s\w]+)/g, function(x){ return x.replace(/./gi, " "); });
}

function parse(fn) {
  out = new Function('i', 'f', 'v', 'rx', 'ry', 'return '+fn+';');
  ctx.fillRect(0, 0, chart.width, chart.height);
  ctx.beginPath();
  
  var i = -1;
  var j = 8;
  ctx.moveTo(i, j);
  
  for (i = 0; i < sampleRate.value; i++) {
    res = out(i, baseFreq*12, 1.0, 16, 16);
    j = 16-res*8-8;
    ctx.lineTo(i, j);
    ctx.moveTo(i, j);
  }
  ctx.stroke();
}

function reverb(f, v, rx, ry, n, id) {
  for (var i = 0; i < noiseBuffer.length; i++) {
    res = out(i, f, v, rx, ry);
    left[i] = res;
    right[i] = res;
  }
  convolver[id][n].buffer = noiseBuffer;
  gains[id][n].gain.linearRampToValueAtTime(1.0, ac.currentTime + 0.03125);
  gains[id][1-n].gain.linearRampToValueAtTime(0.0, ac.currentTime + 0.03125);
}

function playNote(key, p, v, rx, ry) {
  if (gain[key]) {
    kd[key] = true;
    pitchShift(key, p, v, rx, ry);
  }
}

function stopNote(key) {
  if (gain[key]) {
    kd[key] = false;
    gain[key].gain.linearRampToValueAtTime(0.0, ac.currentTime + 0.001);
  }
}

function pitchShift(key, f, v, rx, ry) {
  if (ac) {
    if (l === true) {
      f = baseFreq*2048/(2048-f) * 12;
    } else {
      f = baseFreq*Math.pow(2,f/64/12) * 12;
    }
    v = volume(key, v);
    
    if (gains[key][0].gain.value == 0.0) {
      reverb(f * tuning[key], v, rx, ry, 0, key);
    } else if (gains[key][1].gain.value == 0.0) {
      reverb(f * tuning[key], v, rx, ry, 1, key);
    }
    
    f_.innerText = parseInt(f * tuning[key]);
    v_.innerText = v.toFixed(2);
    rx_.innerText = rx.toFixed(2);
    ry_.innerText = ry.toFixed(2);
  }
}

function volume(key, v) {
  v = -Math.cos(v*Math.PI*2/64)/2+0.5;
  
  if (gain[key] && kd[key] === true) {
    gain[key].gain.linearRampToValueAtTime(v, ac.currentTime + 0.001);
  }
  return v;
}

function scale() {
  if (l === true) {
    var scale = [];
    var frets = [];
    for (var i=0; i<=25; i++) {
      scale[i] = 1536-Math.pow(2, i/12)*64*8+64*8;
      frets[i] = scale[i]/1536*100;
      //document.getElementById("keys").innerHTML += "<hr style='margin:0;width:64px;background-color:white;position:absolute;left:0px;top:"+scale[i]+"px;'/>";
    }
    var lg = [];
    var colors = ["transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent", "transparent", "rgba(0,0,0,0.5)", "transparent", "rgba(0,0,0,0.5)", "transparent"];
    for (var k=0; k<25; k++) {
      lg[k] = "linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), linear-gradient(180deg, ";
      for (var i=23; i>=0; i--) {
          var j = i-k;
          while (j>=12) {j-=12;}
          while (j<0) {j+=12;}
          lg[k] += colors[j]+" "+frets[i+1]+"%, "+colors[j]+" "+frets[i]+"%, "
      }
      lg[k] = lg[k].slice(0,-2)+")";
      document.getElementById(k).style.backgroundImage = lg[k];
      document.getElementById(k).style.backgroundPosition = "0 0";
    }
    document.getElementById("scale").innerText = "reorder";
    ruler_v.style.display = "none";
  } else {
    for (var k=0; k<25; k++) {
      document.getElementById(k).style.backgroundImage = "linear-gradient(90deg, transparent 0%, transparent 49%, white 50%, transparent 51%, transparent 100%), repeating-linear-gradient(0deg, transparent 0%, transparent 4.17%, rgba(0,0,0,0.5) 4.17%, rgba(0,0,0,0.5) 8.33%, transparent 8.33%, transparent 12.50%, rgba(0,0,0,0.5) 12.50%, rgba(0,0,0,0.5) 16.67%, transparent 16.67%, transparent 20.83%, rgba(0,0,0,0.5) 20.83%, rgba(0,0,0,0.5) 25.00%, transparent 25.00%, transparent 29.17%, transparent 29.17%, transparent 33.33%, rgba(0,0,0,0.5) 33.33%, rgba(0,0,0,0.5) 37.50%, transparent 37.50%, transparent 41.67%, rgba(0,0,0,0.5) 41.67%, rgba(0,0,0,0.5) 45.83%, transparent 45.83%, transparent 50%)";
      document.getElementById(k).style.backgroundPosition = "0 "+(-k*64)+"px";
    }
    document.getElementById("scale").innerText = "line_weight";
    ruler_v.style.display = "block";
  }
}

function record() {
  if (!recording) {
    mediaRecorder.start();
    recording = true;
    document.getElementById("rec").innerText = "stop";
  } else {
    mediaRecorder.stop();
    recording = false;
    document.getElementById("rec").innerText = "fiber_manual_record";
  }
}

function detune(key) {
  document.getElementsByClassName("note")[key].selectedIndex = -1;
  var n_ = document.getElementsByClassName("n")[key];
  var d_ = document.getElementsByClassName("d")[key];
  var n = parseInt(n_.value);
  var d = parseInt(d_.value);
  if (!n || !d || n<=0 || d<=0) {
    n = Math.pow(2, key/12);
    d = 1;
    n_.value = n;
    d_.value = d;
  }
  console.log(n+" / "+d+" = "+n/d);
  tuning[key] = n/d;

  tuning_csv[key] = [-1, n_.value, d_.value];
  setCookie("tuning", tuning_csv, 365);
}

function detuneNote(key, v) {
  var n_ = document.getElementsByClassName("n")[key];
  var d_ = document.getElementsByClassName("d")[key];
  tuning[key] = Math.pow(2, v/12);
  n_.value = tuning[key];
  d_.value = 1;

  tuning_csv[key] = [v, n_.value, d_.value];
  setCookie("tuning", tuning_csv, 365);
}

function showTuning() {
  if (tuners.style.display != 'block') {
    tuners.style.display = 'block';
    document.getElementById("tune").innerText = "music_off";
  } else {
    tuners.style.display = 'none';
    document.getElementById("tune").innerText = "music_note";
  }
}

function saveTuning() {
    var filename = "fretboard_tuning.csv";
    csv.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(tuning_csv.join("\n")));
    csv.setAttribute('download', filename);
    csv.click();
}

function openTuning() {
  if (!openCsv.files[0]) {
    openCsv.click();
  } else {
    var file    = openCsv.files[0];
    var reader  = new FileReader();
  
    reader.addEventListener("load", function () {
      var a = reader.result.split("\n");
      for (var i=0; i<a.length; i++) {
        a[i] = a[i].split(",");
        console.log(a[i][0] + " " + a[i][1] + " " + a[i][2]);
        tuning[i] = a[i][1] / a[i][2];
        document.getElementsByClassName("note")[i].selectedIndex = a[i][0];
        document.getElementsByClassName("n")[i].value = a[i][1];
        document.getElementsByClassName("d")[i].value = a[i][2];
        tuning_csv[i] = [a[i][0], a[i][1], a[i][2]];
        setCookie("tuning", tuning_csv, 365);
      }
      ac = null;
      init(sampleRate.value);
    }, false);
  
    if (file && file.name.slice(-4) == ".csv") {
      reader.readAsText(file);
    }
  }
}

function setCookie(cname,cvalue,exdays) {
  t = "";
  for (var i=0; i<cvalue.length; i++) {
    t += cvalue[i].join(",") + " ";
  }
  var cvalue = t;
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = "expires=" + d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}

function showPopup() {
  if (notice.style.right=='-264px') {
    notice.style.right='0px';
    close.getElementsByTagName('i')[0].innerText = 'keyboard_double_arrow_right';
  } else {
    notice.style.right='-264px';
    close.getElementsByTagName('i')[0].innerText = 'keyboard_double_arrow_left';
  }
}


var off = 1;
var oct = 768;
var ruler_v = document.getElementById("ruler_v");
var ruler_h = document.getElementById("ruler_h");

function scrollRulers(event) {
  var x = event.pageX;
  var y = event.pageY;
  ruler_v.scrollTo(0,Math.log2(off)*oct+oct-y+80);
  ruler_h.scrollTo(Math.log2(off)*oct+oct-x+32,0);
}

function countIntervals() {
  for (var i=1; i<17; i++) {
    var top = Math.log2(i)*oct+oct;
    var left = Math.log2(i)*oct+oct;
    ruler_v.innerHTML += "<hr style='top:"+top+"px;'/>";
    ruler_h.innerHTML += "<hr style='left:"+left+"px;'/>";
  }
}
countIntervals();

document.body.addEventListener('mousemove', scrollRulers);

</script>
</body>
</html>
